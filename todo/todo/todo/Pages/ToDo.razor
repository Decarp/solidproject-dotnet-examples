@page "/todo"
@using System.Diagnostics
@inject SolidDotNet.SolidClient client
@inject NavigationManager navigation

<h3>To Do</h3>


<p>
    <button class="btn btn-primary" @onclick="LoginToSolidAsync">Login To Solid Community Server</button>
</p>


<p>
    <label>
        User Name:
        <input value="@userName"
               @onchange="@((ChangeEventArgs __e) => userName = __e?.Value?.ToString())" />
    </label>
</p>

<p>
    <button class="btn btn-primary" @onclick="LoadToDosAsync">Load To Dos</button>
</p>


@code {
    string identityProvider = "http://localhost:3000";
    string appName = "BlazorToDo";
    string folderName = "todo";

    List<ToDo> todoItems = new List<ToDo>();
    string userName = string.Empty;

    bool useDebug = true;

    private async Task LoginToSolidAsync()
    {
        string[] redirectUris = new string[1] { "https://localhost:7143/todo" };
        await client.RegisterAppAsync(identityProvider, redirectUris, appName);
        var url = await client.GetLoginUrlAsync(redirectUris.First());
        navigation.NavigateTo(url);
    }

    protected async override void OnInitialized()
    {
        GetQueryStringValues();
        navigation.LocationChanged += HandleLocationChanged;
    }

    void GetQueryStringValues()
    {
        string appCode;
        navigation.TryGetQueryString<string>("code", out appCode);
        client.SetAppCode(appCode);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(client.AppCode))
            {
                string audienceAndIssuerUrl = navigation.BaseUri + "todo";
                await client.GetAccessAndIdTokensAsync(audienceAndIssuerUrl, audienceAndIssuerUrl);
                userName = client.GetUserName();
            }

            StateHasChanged();
        }
    }

    private async Task LoadToDosAsync()
    {
        var folder = await client.GetOrCreateFolderAsync(folderName);
        DebugOut($"{folder.PathAndQuery} exists!");
    }

        private void DebugOut(string item)
        {
            if (useDebug)
            {
                Console.WriteLine(item);
                Debug.WriteLine(item);
            }
        }
}
