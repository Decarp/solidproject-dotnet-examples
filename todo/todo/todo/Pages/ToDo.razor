@page "/todo"
@using System.Diagnostics
@inject SolidDotNet.SolidClient client
@inject NavigationManager navigation

<h3>To Do Page</h3>

<p>
    This page is the front facing page for our To Do app. The actual component handling To Do items, rendering, etc is handled by the
    Blazor ToDoComponent, which is embedded in this page.
</p>

<p>To get started, please first login. If we are successful, we should be able to read your name from the pod.</p>

<p>Note that this page is a crude implementation for a UI. It is intended to be demostrative only.</p>

<p>
    <label>
        URL for Community Solid Server:
        <input value="@identityProvider"
               @onchange="@((ChangeEventArgs __e) => identityProvider = __e?.Value?.ToString())" />
    </label>
    <button class="btn btn-primary" @onclick="LoginToSolidAsync">Login To Solid Community Server</button>
</p>


<p>
    <label>
        User Name:
        <input value="@userName"
               @onchange="@((ChangeEventArgs __e) => userName = __e?.Value?.ToString())" />
    </label>
</p>

<ToDoComponent></ToDoComponent>

@code {
    string identityProvider = string.Empty;
    string defaultIdentityProvider = "http://localhost:3000";
    string appName = "BlazorToDo";

    List<ToDo> todoItems = new List<ToDo>();
    string userName = string.Empty;

    bool useDebug = true;

    private async Task LoginToSolidAsync()
    {
        string communityServerUrl = string.Empty;

        if (string.IsNullOrEmpty(identityProvider))
        {
            communityServerUrl = defaultIdentityProvider;
        }
        else
        {
            communityServerUrl = identityProvider;

            if (communityServerUrl.EndsWith("/"))
            {
                communityServerUrl = communityServerUrl.Remove(communityServerUrl.Length - 1, 1);
            }
        }
        string redirect = navigation.BaseUri + "todo";

        string[] redirectUris = new string[1] { redirect };
        await client.RegisterAppAsync(communityServerUrl, redirectUris, appName);
        var url = await client.GetLoginUrlAsync(redirectUris.First());
        navigation.NavigateTo(url);
    }

    protected async override void OnInitialized()
    {
        GetQueryStringValues();
        navigation.LocationChanged += HandleLocationChanged;

    }

    void GetQueryStringValues()
    {
        string appCode;
        navigation.TryGetQueryString<string>("code", out appCode);
        client.SetAppCode(appCode);
    }

    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(client.AppCode))
            {
                string audienceAndIssuerUrl = navigation.BaseUri + "todo";
                await client.GetAccessAndIdTokensAsync(audienceAndIssuerUrl, audienceAndIssuerUrl);
                userName = client.GetUserName();
            }

            StateHasChanged();
        }
    }

    private void DebugOut(string item)
    {
        if (useDebug)
        {
            Console.WriteLine(item);
            Debug.WriteLine(item);
        }
    }


}
