@page "/login"
@using System.Diagnostics
@using IdentityModel.Client
@using IdentityModel.OidcClient
@using System.Web;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net
@using System.Text
@using System.Net.Http.Headers
@using Newtonsoft.Json
@inject NavigationManager navigation
@inject ProtectedLocalStorage BrowserStorage

<h3>Login</h3>

<button class="btn btn-primary" @onclick="LoginToSolid">Login To Solid Community Server</button>

@code {

    static string identityProvider = "http://localhost:3000";
    static string clientName = "BlazorExample";
    static string scope = "openid offline_access webid";

    private async Task LoginToSolid()
    {

        //await RegisterApp();
        await RegisterAppManually();
        var url = await GetUrl();
        navigation.NavigateTo(url);
    }

    private async Task RegisterAppManually()
    {
        string url = identityProvider + "/idp/reg";
        var client = new HttpClient();
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        
        string content = @"
        {
           ""application_type"": ""web"",
           ""redirect_uris"":
           [""https://localhost:7030/"",
           ""https://localhost:7030/api/redirect""],
           ""client_name"": ""BlazorExample""
        }
        ";
        var stringContent = new StringContent(content, Encoding.UTF8, "application/json");
        var result = await client.PostAsync(url, stringContent);
        var data = await result.Content.ReadAsStringAsync();
        var item = JsonConvert.DeserializeObject<RegisterData>(data);

        SaveClientIdToStorage(item.client_id);
        SaveSecretToStorage(item.client_secret);
    }

    private async Task RegisterApp()
    {

        var client = new HttpClient();
        var doc = new DynamicClientRegistrationDocument();
        doc.RedirectUris = new string[1] { navigation.BaseUri };

        var request = new DynamicClientRegistrationRequest();
        request.Address = identityProvider + "/idp/reg";
        request.Document = doc;
        request.Method = HttpMethod.Post;

        var response = await client.RegisterClientAsync(request);

        if (response.IsError) throw new Exception(response.Error);

        Debug.WriteLine(response.Json);
        Console.WriteLine(response.Json);

        var clientId = response.ClientId;
        var secret = response.ClientSecret;

        await SaveClientIdToStorage(clientId);
        await SaveSecretToStorage(secret);

    }

    private async Task<string> GetUrl()
    {
        // the controller at this url will handle token, etc.
        //string redirectUrl = navigation.BaseUri + "api/redirect";

        Debug.WriteLine(navigation.BaseUri);
        Console.WriteLine(navigation.BaseUri);

        var clientId = await GetClientIdFromStorage();

        Debug.WriteLine(clientId);
        Console.WriteLine(clientId);

        var options = new OidcClientOptions
            {
                Authority = identityProvider,
                ClientId = clientId,
                RedirectUri = navigation.BaseUri,
                Scope = scope,
            };

        var client = new OidcClient(options);
        var state = await client.PrepareLoginAsync();

        string url = state.StartUrl;

        url += "&prompt=consent&response_mode=query";

        Debug.WriteLine(url);
        Console.WriteLine(url);

        return url;

    }

    private async Task SaveClientIdToStorage(string clientId)
    {
        await BrowserStorage.SetAsync("clientId", clientId);
    }

    private async Task SaveSecretToStorage(string secret)
    {
        await BrowserStorage.SetAsync("secret", secret);
    }

    public async Task<string?> GetClientIdFromStorage()
    {
        string? clientId;

        var result = await BrowserStorage.GetAsync<string>("clientId");
        clientId = result.Success ? result.Value : "";
        return clientId;
    }
}
